AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: can contain only ASCII characters.

  SSHLocation:
    Description: 'The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0

Mappings:
  RegionMap:
    ca-central-1:
      "AMI": ami-03338e1f67dae0168
    us-east-2:
      "AMI": ami-02bcbb802e03574ba
    eu-west-3:
      "AMI": ami-0451ae4fd8dd178f7
    eu-north-1:
      "AMI": ami-d16fe6af
    eu-west-2:
      "AMI": ami-09ead922c1dad67e4
    eu-central-1:
      "AMI": ami-09def150731bdbcc2
    ap-south-1:
      "AMI": ami-0889b8a448de4fc44
    us-east-1:
      "AMI": ami-0de53d8956e8dcf80
    us-west-1:
      "AMI": ami-0019ef04ac50be30f
    ap-northeast-2:
      "AMI": ami-047f7b46bd6dd5d84
    eu-west-1:
      "AMI": ami-07683a44e80cd32c5
    us-west-2:
      "AMI": ami-061392db613a6357b
    sa-east-1:
      "AMI": ami-0669a96e355eac82f
    ap-northeast-1:
      "AMI": ami-0f9ae750e8274075b
    ap-southeast-2:
      "AMI": ami-04481c741a0311bbb
    ap-southeast-1:
      "AMI": ami-0b419c3a4b01d1859

Resources:
# System VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.11.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::VPC'] ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::InternetGateway'] ]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.11.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PublicSubnetA'] ]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.11.16.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PublicSubnetB'] ]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PublicRouteTable'] ]

  PublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Access to our Web server
      SecurityGroupIngress:
      - Description: Enable SSH access via port 22
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      - Description: Enable HTTP access via port 80 IPv4
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - Description: Enable HTTP access via port 80 IPv6
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIpv6: ::/0
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PublicSecurityGroup'] ]

#Private Subnet
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.11.32.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PrivateSubnetA'] ]

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.11.48.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PrivateSubnetB'] ]

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PrivateRouteTable'] ]

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable database access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref PublicSecurityGroup
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref FargateSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::PrivateSecurityGroup'] ]

# Servers
  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "ReadAndWriteS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: "*"
        -
          PolicyName: "ReadSecrets"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
        -
          PolicyName: "AccessDynamoDB"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource: "*"
      RoleName: !Join ['', [!Ref 'AWS::StackName', 'ServerRole'] ]

  DeployRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        -
          Ref: ServerRole

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudPipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  PipelineArtifacts:
    Type: AWS::S3::Bucket

  SPAPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join ['', [!Ref 'AWS::StackName', '-SPA-Pipeline'] ]
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifacts
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                PollForSourceChanges: false
                BranchName: master
                RepositoryName: TSAGallery-SPA
              OutputArtifacts:
                - Name: SourceArtifact
        -
          Name: Deploy
          Actions:
            -
              Name: DeployAction
              RunOrder: 2
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                ObjectKey: !Join ['', [!Ref 'AWS::StackName', '-spa-source'] ]
                Extract: true
                BucketName: !ImportValue TSAGallery-DataBucket

  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:  !Join ['', [!Ref 'AWS::StackName', 'CFOriginAccessIdentity'] ]

  DataBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !ImportValue TSAGallery-DataBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Join [ "", [ "arn:aws:s3:::", !ImportValue TSAGallery-DataBucket, "/*" ] ]
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId

  CFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CacheBehaviors:
          -
            Compress: true
            ForwardedValues:
              QueryString: false
            PathPattern: images/uploads/*.*
            TargetOriginId: S3-TSAGallery/Uploads
            ViewerProtocolPolicy: allow-all
          -
            Compress: false
            MaxTTL: 0
            MinTTL: 0
            DefaultTTL: 0
            ForwardedValues:
              QueryString: true
            PathPattern: api/*
            TargetOriginId: Fargate-Endpoint
            ViewerProtocolPolicy: allow-all
            AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: S3-TSAGallery/SPA
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Enabled: true
        Origins:
          -
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
            DomainName:
              Fn::GetAtt:
                - APIALB
                - DNSName
            Id: Fargate-Endpoint
          -
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref 'CFOriginAccessIdentity'] ]
            DomainName: !Join [ "", [ !ImportValue TSAGallery-DataBucket, ".s3.", !Ref 'AWS::Region', ".amazonaws.com" ] ]
            Id: S3-TSAGallery/Uploads
          -
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref 'CFOriginAccessIdentity'] ]
            DomainName: !Join [ "", [ !ImportValue TSAGallery-DataBucket, ".s3.", !Ref 'AWS::Region', ".amazonaws.com" ] ]
            OriginPath: !Join ['', ['/', !Ref 'AWS::StackName', '-spa-source'] ]
            Id: S3-TSAGallery/SPA
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::CFDistribution'] ]

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::DatabaseSubnetGroup'] ]

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: These are the master secrets for my Aurora Instance
      GenerateSecretString:
        ExcludeCharacters: '"@/\'
        GenerateStringKey: password
        PasswordLength: 40
        SecretStringTemplate: '{"username":"admin"}'
      Name: !Join ['', [!Ref 'AWS::StackName', '-RDSMasterSecret'] ]

  DatabaseSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: DatabaseSecret
      TargetId:
        Ref: DatabaseCluster
      TargetType: AWS::RDS::DBCluster

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      DatabaseName: !Join ['', [!Ref 'AWS::StackName', 'Data'] ]
      DBClusterIdentifier: !Join ['', [!Ref 'AWS::StackName', '-database-cluster'] ]
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      Engine: aurora
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 16
        MinCapacity: 2
        SecondsUntilAutoPause: 7200
      Tags:
        - Key: 'Name'
          Value: !Join ['', [!Ref 'AWS::StackName', '::DatabaseCluster'] ]
      VpcSecurityGroupIds:
        - !Ref PrivateSecurityGroup
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', Ref: 'AWS::StackName', '-RDSMasterSecret:SecretString:username}}'] ]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', Ref: 'AWS::StackName', '-RDSMasterSecret:SecretString:password}}'] ]
    DependsOn:
      - DatabaseSubnetGroup
      - DatabaseSecret

  DynamoDBCache:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['', [!Ref 'AWS::StackName', 'Cache'] ]
      AttributeDefinitions:
      - AttributeName: key
        AttributeType: S
      KeySchema:
      - AttributeName: key
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  BuildNumber:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['', ['/BuildsNumbers/', !Ref 'AWS::StackName'] ]
      Type: "String"
      Value: "1"

  APIBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['', [!Ref 'AWS::StackName', '-API-Build'] ]
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: true
        EnvironmentVariables:
          -
            Name : BUILD_NUM_PARAMNAME
            Type : PLAINTEXT
            Value : !Join ['', ['/BuildsNumbers/', !Ref 'AWS::StackName'] ]
          -
            Name : BUILD_NUM
            Type : PARAMETER_STORE
            Value : !Join ['', ['/BuildsNumbers/', !Ref 'AWS::StackName'] ]
          -
            Name : AWS_REGION
            Type : PLAINTEXT
            Value : !Ref 'AWS::Region'
          -
            Name : AWS_ACCOUNT_ID
            Type : PLAINTEXT
            Value : !Ref 'AWS::AccountId'
          -
            Name: CLUSTER
            Type: PLAINTEXT
            Value: !Ref APICluster
          -
            Name: SERVICE
            Type: PLAINTEXT
            Value: !GetAtt APIService.Name
          -
            Name: DISTRIBUTIONID
            Type: PLAINTEXT
            Value: !Ref CFDistribution
      Artifacts:
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref 'AWS::StackName'
          StreamName: build
      ServiceRole : !Ref PipelineRole

  APIPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join ['', [!Ref 'AWS::StackName', '-API-Pipeline'] ]
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifacts
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                PollForSourceChanges: false
                BranchName: master
                RepositoryName: TSAGallery-API
              OutputArtifacts:
                - Name: SourceArtifact
        -
          Name: Build
          Actions:
            -
              Name: BuildAction
              RunOrder: 1
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref APIBuildProject

  FargateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AllowEverything
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  APICluster:
    Type: AWS::ECS::Cluster

  APILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/', !Ref 'AWS::StackName', '/APITask'] ]
      RetentionInDays: 14

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to our fargate containers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          SourceSecurityGroupId: !Ref PublicSecurityGroup
      VpcId: !Ref VPC

  APITask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: 730172803321.dkr.ecr.ap-southeast-1.amazonaws.com/tsa/gallery
          Name: !Join ['', [!Ref 'AWS::StackName', 'APIContainer'] ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref APILogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - HostPort: 3000
              Protocol: tcp
              ContainerPort: 3000
      Cpu: 512
      Memory: '1024'
      ExecutionRoleArn: !Ref FargateRole
      TaskRoleArn: !Ref FargateRole
      Family: !Join ['', [!Ref 'AWS::StackName', 'APITask'] ]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  APIService:
    Type: AWS::ECS::Service
    DependsOn:
      - APIALB
      - APIALBListener
    Properties:
      Cluster: !Ref APICluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 15
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Join ['', [!Ref 'AWS::StackName', 'APIContainer'] ]
          ContainerPort: 3000
          TargetGroupArn: !Ref APIALBTG
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateSecurityGroup
          Subnets:
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
      TaskDefinition: !Ref APITask

  APIALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join ['', [!Ref 'AWS::StackName', 'APIALB'] ]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Type: application

  APIALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref APIALBTG
          Type: forward
      LoadBalancerArn: !Ref APIALB
      Port: 80
      Protocol: HTTP

  APIALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: APIALB
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: !Join ['', [!Ref 'AWS::StackName', 'APIALBTG'] ]
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

Outputs:
  DistributionUrl:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - CFDistribution
          - DomainName
    Description: CloudFront Distribution URL


